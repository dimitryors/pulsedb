
query <- 

agg:aggregator ":" ds:downsampler ":" mn:metric_name "{" tags:tags / 
agg:aggregator ":" ds:downsampler ":" mn:metric_name / 
agg:aggregator ":" mn:metric_name "{" tags:tags / 
mn:metric_name "{" tags:tags /
agg:aggregator ":" mn:metric_name / 
mn:metric_name 
`
  case Node of
    {mn, Metric} ->
      {undefined, undefined, Metric, []};
    _ ->
      {proplists:get_value(agg,Node), proplists:get_value(ds,Node), proplists:get_value(mn,Node), proplists:get_value(tags,Node,[])}
  end
`;

tags <- "}" / tag:tag "}" / tag:tag "," tags:tags `
  case Node of
    <<"}">> -> [];
    _ -> [proplists:get_value(tag,Node)] ++ proplists:get_value(tags,Node,[])
  end
`;


downsampler <- n:number (i:"s" / i:"m" / i:"h" / i:"d") "-" d:string `
  Time = proplists:get_value(n,Node) * case proplists:get_value(i,Node) of
    <<"s">> -> 1;
    <<"m">> -> 60;
    <<"h">> -> 3600;
    <<"d">> -> 86400
  end,
  {Time, proplists:get_value(d,Node)}
`;

aggregator <- string;

metric_name <- string;

tag <- key:string "=" value:string `
  Key = proplists:get_value(key,Node),
  Value = proplists:get_value(value,Node),
  case Key of
    <<"from">> -> {from, Value};
    <<"to">> -> {to, Value};
    _ -> {Key, Value}
  end
`;




string <- '"' s:((!'"' .)*) '"' / s:(nonspace)+ `
  case Node of
    {s,S} -> iolist_to_binary(S);
    _ -> iolist_to_binary(proplists:get_value(s,Node))
  end
`;


nonspace <- [^ ;\{\}\n\t\r\,\=\:] ~;


number <- [0-9]+ `list_to_integer(binary_to_list(iolist_to_binary(Node)))`;



